// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AUTHOR
  USER
}

enum ComplexityLevel {
  ADVANCED
  NORMAL
  EASY
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  password          String
  email             String   @unique
  role              UserRole
  xp                Int      @default(0)
  coin              Int      @default(0)
  date_created      DateTime @default(now())
  fav_AIs           AI[]
  badges            Badge[]
  completed_lessons Lesson[] @relation("completedLessons")
  saved_lesssons    Lesson[] @relation("savedLessons")

  @@map("users")
}

model Lesson {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  sub_header       String
  body             String
  reading_duration Int
  Course           Course? @relation(fields: [courseId], references: [id])
  courseId         String? @db.ObjectId
  completedBy      User?   @relation("completedLessons", fields: [completedById], references: [id])
  savedBy          User?   @relation("savedLessons", fields: [savedById], references: [id])
  completedById    String? @db.ObjectId
  savedById        String? @db.ObjectId

  @@map("lessons")
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  lessons     Lesson[]
  description String
  icon        Bytes
  tags        Tag[]
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  quizId      String   @db.ObjectId

  @@map("courses")
}

model Tag {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String? @db.ObjectId
  AI       AI?     @relation(fields: [aIId], references: [id])
  aIId     String? @db.ObjectId

  @@map("tags")
}

model Badge {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  icon   Bytes
  price  Int     @default(0)
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@map("badges")
}

model AI {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  complexity_level  ComplexityLevel @default(NORMAL)
  body              String
  tags              Tag[]
  origin_AI_website String?
  AI_usuage_link    String?
  version           Float?
  slug              String          @unique
  AI_release_date   DateTime?
  date_created      DateTime        @default(now())
  date_updated      DateTime        @default(now()) @updatedAt
  video             Video?          @relation(fields: [videoId], references: [id])
  videoId           String?         @db.ObjectId
  google_query_text String?
  logo              Bytes?          @db.BinData
  logo_alt          String?
  User              User?           @relation(fields: [userId], references: [id])
  userId            String?         @db.ObjectId

  @@map("AIs")
}

model Video {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  description String
  AI          AI[]

  @@map("videos")
}

model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  questions Question[]
  points    Int
  Courses   Course[]

  @@map("quizes")
}

model Question {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  possible_answers String[]
  answer           String
  Quiz             Quiz?    @relation(fields: [quizId], references: [id])
  quizId           String?  @db.ObjectId

  @@map("questions")
}
