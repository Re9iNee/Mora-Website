// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AUTHOR
  USER
}

enum ComplexityLevel {
  ADVANCED
  NORMAL
  EASY
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  password          String
  role              UserRole
  xp                Int
  coin              Int
  date_created      DateTime @default(now())
  fav_AIs           AI[]
  badges            Badge[]
  completed_lessons Lesson[] @relation("completedLessons")
  saved_lesssons    Lesson[] @relation("savedLessons")

  @@map("users")
}

model Lesson {
  id               Int     @id @default(autoincrement())
  title            String
  sub_header       String
  body             String
  reading_duration Int
  Course           Course? @relation(fields: [courseId], references: [id])
  courseId         Int?
  completedBy      User?   @relation("completedLessons", fields: [completedById], references: [id])
  savedBy          User?   @relation("savedLessons", fields: [savedById], references: [id])
  completedById    Int?
  savedById        Int?

  @@map("lessons")
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  lessons     Lesson[]
  description String
  icon        Bytes
  tags        Tag[]
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  quizId      Int

  @@map("courses")
}

model Tag {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
  AI       AI?     @relation(fields: [aIId], references: [id])
  aIId     Int?

  @@map("tags")
}

model Badge {
  id     Int    @id @default(autoincrement())
  name   String
  icon   Bytes
  price  Int    @default(0)
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?

  @@map("badges")
}

model AI {
  id                Int             @id @default(autoincrement())
  title             String          @db.VarChar(100)
  complexity_level  ComplexityLevel
  body              String
  tags              Tag[]
  origin_AI_website String
  AI_usuage_link    String
  version           Float
  slug              String          @unique @db.VarChar(100)
  AI_release_date   DateTime
  date_created      DateTime        @default(now())
  date_updated      DateTime        @default(now()) @updatedAt
  video             Video           @relation(fields: [videoId], references: [id])
  videoId           Int
  google_query_text String
  logo              Bytes
  logo_alt          String
  User              User?           @relation(fields: [userId], references: [id])
  userId            Int?

  @@map("AIs")
}

model Video {
  id          Int    @id @default(autoincrement())
  name        String
  url         String
  description String
  AI          AI[]

  @@map("videos")
}

model Quiz {
  id        Int        @id @default(autoincrement())
  questions Question[]
  points    Int
  Courses   Course[]

  @@map("quizes")
}

model Question {
  id               Int      @id @default(autoincrement())
  name             String
  possible_answers String[]
  answer           String
  Quiz             Quiz?    @relation(fields: [quizId], references: [id])
  quizId           Int?

  @@map("questions")
}
